// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/glorpus-work/gotya/pkg/auth (interfaces: Authenticator)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/auth.go . Authenticator
//

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	http "net/http"
	reflect "reflect"

	auth "github.com/glorpus-work/gotya/pkg/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
	isgomock struct{}
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockAuthenticator) Apply(req *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockAuthenticatorMockRecorder) Apply(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockAuthenticator)(nil).Apply), req)
}

// Type mocks base method.
func (m *MockAuthenticator) Type() auth.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(auth.Type)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockAuthenticatorMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockAuthenticator)(nil).Type))
}
